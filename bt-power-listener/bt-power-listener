#!/usr/bin/python2
#
# Event handling for bluetooth controller power status
#
# Turned on:
#  - Start the kodi-standalone systemd service
#  - Send the IR signals to turn toggle power to my amp and TV
#
# Turned off:
#  - Display notification in Kodi if watching a video. Or..
#  - Stop the kodi-standalone service other
#  - Send the IR signals to turn toggle power to my amp and TV
#
# Environment Configuration:
#
#   BT_POWER_LISTENER_ADAPTER_ID: Bluetooth adapater id. eg: hci0
#   BT_POWER_LISTENER_DEVICE_ID:  Bluetooth device id.   eg: 00:01:E3:64:DD:9B

import os
import dbus
import gobject
import subprocess
import httplib
import json

from dbus.mainloop.glib import DBusGMainLoop

dbus_loop = DBusGMainLoop()
bus = dbus.SystemBus(mainloop=dbus_loop)

def kodi_active():
    return subprocess.call(['systemctl', '-q', 'is-active', 'kodi']) == 0

def kodi_started(start):
    subprocess.call(['systemctl', 'start' if start else 'stop', 'kodi.service'])

def kodi_rpc(method, params=None):
    if not kodi_active(): return None

    body = {'jsonrpc': '2.0', 'method': method, 'id': 1}
    headers = {'Content-Type':'application/json'}

    if params: body['params'] = params

    connecton = httplib.HTTPConnection('localhost', 8080)
    connecton.request('POST', '/jsonrpc', json.dumps(body), headers)

    return json.loads(connecton.getresponse().read())['result']

def send_power_ir():
    subprocess.call(['irsend', 'SEND_ONCE', 'LG_AKB73975711', 'POWER'])
    subprocess.call(['irsend', 'SEND_ONCE', 'SMSL_RC36', 'POWER'])

# When the controller is connected / disconnected toggle power to the TV & amp
def bluez_cb(iface=None, mbr=None, path=None):
    if ('Connected' not in mbr):
        return

    controller_on = mbr['Connected']

    # Just display a notice if controller disconnects while playing
    if not controller_on and kodi_rpc('Player.GetActivePlayers'):
        kodi_rpc('GUI.ShowNotification', {
            'title':   'Controller Disconnected',
            'message': 'Controller has been disconnected'
        })

        return

    # Toggle device power and turn stop kodi
    if not kodi_rpc('Player.GetActivePlayers'):
        send_power_ir()
        kodi_started(controller_on)

# Get bluethooth adapter ID and device ID to listen for connection status
try:
    adapter_id = os.environ['BT_POWER_LISTENER_ADAPTER_ID']
    device_id  = os.environ['BT_POWER_LISTENER_DEVICE_ID'].replace(':', '_')
except KeyError:
    exit('Please configure the adapter and device ID.')

bus.add_signal_receiver(bluez_cb, path="/org/bluez/{}/dev_{}".format(adapter_id, device_id))

mainloop = gobject.MainLoop()
mainloop.run()
